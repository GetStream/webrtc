# Copyright (c) 2025 The WebRTC project authors. All Rights Reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS.  All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

import("../webrtc.gni")

audio_codec_speed_tests_resources = [
  "audio_coding/music_stereo_48kHz.pcm",
  "audio_coding/speech_mono_16kHz.pcm",
  "audio_coding/speech_mono_32_48kHz.pcm",
]
group("audio_codec_speed_tests_data") {
  data = audio_codec_speed_tests_resources
}

audio_decoder_unittests_resources = [ "audio_coding/testfile32kHz.pcm" ]
group("audio_decoder_unittests_data") {
  data = audio_decoder_unittests_resources
}

common_video_resources = [ "foreman_cif.yuv" ]
group("common_video_data") {
  data = common_video_resources
}

modules_tests_resources = [
  "audio_coding/testfile16kHz.pcm",
  "audio_coding/testfile32kHz.pcm",
  "audio_coding/teststereo32kHz.pcm",
  "foreman_cif.yuv",
]
group("modules_tests_data") {
  data = modules_tests_resources
}

modules_unittests_resources = [
  "audio_coding/neteq_opus.rtp",
  "audio_coding/neteq_opus_dtx.rtp",
  "audio_coding/neteq_universal_new.rtp",
  "audio_coding/speech_4_channels_48k_one_second.wav",
  "audio_coding/speech_mono_16kHz.pcm",
  "audio_coding/speech_mono_32_48kHz.pcm",
  "audio_coding/testfile16kHz.pcm",
  "audio_coding/testfile32kHz.pcm",
  "audio_coding/testfile_fake_stereo_32kHz.pcm",
  "audio_coding/teststereo32kHz.pcm",
  "audio_device/audio_short16.pcm",
  "audio_device/audio_short44.pcm",
  "audio_device/audio_short48.pcm",
  "audio_processing/agc/agc_audio.pcm",
  "audio_processing/agc/agc_no_circular_buffer.dat",
  "audio_processing/agc/agc_pitch_gain.dat",
  "audio_processing/agc/agc_pitch_lag.dat",
  "audio_processing/agc/agc_spectral_peak.dat",
  "audio_processing/agc/agc_vad.dat",
  "audio_processing/agc/agc_voicing_prob.dat",
  "audio_processing/agc/agc_with_circular_buffer.dat",
  "audio_processing/output_data_fixed.pb",
  "audio_processing/output_data_float.pb",
  "audio_processing/output_data_float_avx2.pb",
  "audio_processing/output_data_mac.pb",
  "audio_processing/transient/ajm-macbook-1-spke16m.pcm",
  "audio_processing/transient/audio16kHz.pcm",
  "audio_processing/transient/audio32kHz.pcm",
  "audio_processing/transient/audio48kHz.pcm",
  "audio_processing/transient/audio8kHz.pcm",
  "audio_processing/transient/detect16kHz.dat",
  "audio_processing/transient/detect32kHz.dat",
  "audio_processing/transient/detect48kHz.dat",
  "audio_processing/transient/detect8kHz.dat",
  "audio_processing/transient/double-utils.dat",
  "audio_processing/transient/float-utils.dat",
  "audio_processing/transient/suppressed16kHz.pcm",
  "audio_processing/transient/suppressed32kHz.pcm",
  "audio_processing/transient/suppressed8kHz.pcm",
  "audio_processing/transient/wpd0.dat",
  "audio_processing/transient/wpd1.dat",
  "audio_processing/transient/wpd2.dat",
  "audio_processing/transient/wpd3.dat",
  "audio_processing/transient/wpd4.dat",
  "audio_processing/transient/wpd5.dat",
  "audio_processing/transient/wpd6.dat",
  "audio_processing/transient/wpd7.dat",
  "far16_stereo.pcm",
  "far176_stereo.pcm",
  "far192_stereo.pcm",
  "far22_stereo.pcm",
  "far32_stereo.pcm",
  "far44_stereo.pcm",
  "far48_stereo.pcm",
  "far88_stereo.pcm",
  "far8_stereo.pcm",
  "far96_stereo.pcm",
  "foreman_cif.yuv",
  "foreman_cif_short.yuv",
  "near16_stereo.pcm",
  "near176_stereo.pcm",
  "near192_stereo.pcm",
  "near22_stereo.pcm",
  "near32_stereo.pcm",
  "near44_stereo.pcm",
  "near48_mono.pcm",
  "near48_stereo.pcm",
  "near88_stereo.pcm",
  "near8_stereo.pcm",
  "near96_stereo.pcm",
  "ref03.aecdump",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke1_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke1_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke1_1_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke1_1_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke2_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke2_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke2_1_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingChoke2_1_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingDelay1_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingDelay1_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingLoss1_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_IncreasingLoss1_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_Multi1_1_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_Multi1_1_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyChoke_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyChoke_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyChoke_1_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyChoke_1_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyDelay_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyDelay_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyLoss_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_SteadyLoss_0_TOF.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_UnlimitedSpeed_0_AST.bin",
  "remote_bitrate_estimator/VideoSendersTest_BweTest_UnlimitedSpeed_0_TOF.bin",
  "short_mixed_mono_48.dat",
  "short_mixed_mono_48.pcm",
  "short_mixed_mono_48_arm.dat",
  "short_mixed_stereo_48.dat",
  "short_mixed_stereo_48.pcm",
  "voice_engine/audio_tiny48.wav",
]
group("modules_unittests_data") {
  data = modules_unittests_resources
}

network_tester_unittests_resources = [
  "network_tester/client_config.dat",
  "network_tester/server_config.dat",
]
group("network_tester_unittests_data") {
  data = network_tester_unittests_resources
}

peer_connection_e2e_smoke_test_resources = [
  "pc_quality_smoke_test_alice_source.wav",
  "pc_quality_smoke_test_bob_source.wav",
]
group("peer_connection_e2e_smoke_test_data") {
  data = peer_connection_e2e_smoke_test_resources
}

rtc_media_unittests_resources = [
  "media/captured-320x240-2s-48.frames",
  "media/faces.1280x720_P420.yuv",
  "media/faces_I400.jpg",
  "media/faces_I411.jpg",
  "media/faces_I420.jpg",
  "media/faces_I422.jpg",
  "media/faces_I444.jpg",
]
group("rtc_media_unittests_data") {
  data = rtc_media_unittests_resources
}

rtc_unittests_resources = [ "reference_video_640x360_30fps.y4m" ]
group("rtc_unittests_data") {
  data = rtc_unittests_resources
}

scenario_resources = [
  "difficult_photo_1850_1110.yuv",
  "photo_1850_1110.yuv",
  "presentation_1850_1110.yuv",
  "web_screenshot_1850_1110.yuv",
]
group("scenario_data") {
  data = scenario_resources
}

scenario_unittest_resources = [ "foreman_cif.yuv" ]
group("scenario_unittest_data") {
  data = scenario_unittest_resources
}

svc_tests_resources = [
  "difficult_photo_1850_1110.yuv",
  "photo_1850_1110.yuv",
  "presentation_1850_1110.yuv",
  "web_screenshot_1850_1110.yuv",
]
group("svc_tests_data") {
  data = svc_tests_resources
}

test_support_unittests_resources = [
  "foreman_cif_short.yuv",
  "video_coding/frame-ethernet-ii.pcap",
  "video_coding/frame-loopback.pcap",
  "video_coding/pltype103.rtp",
  "video_coding/pltype103_header_only.rtp",
  "video_coding/ssrcs-2.pcap",
  "video_coding/ssrcs-3.pcap",
]
group("test_support_unittests_data") {
  data = test_support_unittests_resources
}

tools_unittests_resources = [
  "foreman_128x96.yuv",
  "foreman_cif.yuv",
  "reference_less_video_test_file.y4m",
  "rtc_event_log/rtc_event_log_500kbps.binarypb",
]
group("tools_unittests_data") {
  data = tools_unittests_resources
}

video_coding_modules_tests_resources = []
if (is_android) {
  video_coding_modules_tests_resources += [
    "foreman_128x96.yuv",
    "foreman_160x120.yuv",
    "foreman_176x144.yuv",
    "foreman_240x136.yuv",
    "foreman_320x240.yuv",
    "foreman_480x272.yuv",
  ]
} else {
  video_coding_modules_tests_resources += [
    "ConferenceMotion_1280_720_50.yuv",
    "FourPeople_1280x720_30.yuv",
  ]
}
group("video_coding_modules_tests_data") {
  data = video_coding_modules_tests_resources
}

video_engine_tests_resources = [
  "ConferenceMotion_1280_720_50.yuv",
  "foreman_cif_short.yuv",
  "voice_engine/audio_long16.pcm",
]
group("video_engine_tests_data") {
  data = video_engine_tests_resources
}

webrtc_perf_tests_resources = [
  "ConferenceMotion_1280_720_50.yuv",
  "audio_coding/speech_mono_16kHz.pcm",
  "audio_coding/speech_mono_32_48kHz.pcm",
  "audio_coding/testfile32kHz.pcm",
  "difficult_photo_1850_1110.yuv",
  "foreman_cif.yuv",
  "paris_qcif.yuv",
  "photo_1850_1110.yuv",
  "presentation_1850_1110.yuv",
  "voice_engine/audio_long16.pcm",
  "web_screenshot_1850_1110.yuv",
]
group("webrtc_perf_tests_data") {
  data = webrtc_perf_tests_resources
}

if (is_ios) {
  bundle_data("audio_codec_speed_tests_bundle_data") {
    testonly = true
    sources = audio_codec_speed_tests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("audio_decoder_unittests_bundle_data") {
    testonly = true
    sources = audio_decoder_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("common_video_unittests_bundle_data") {
    testonly = true
    sources = common_video_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("modules_tests_bundle_data") {
    testonly = true
    sources = modules_tests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("modules_unittests_bundle_data") {
    testonly = true
    sources = modules_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("network_tester_unittests_bundle_data") {
    testonly = true
    sources = network_tester_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("peer_connection_e2e_smoke_test_resources_bundle_data") {
    testonly = true
    sources = peer_connection_e2e_smoke_test_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("rtc_media_unittests_bundle_data") {
    testonly = true
    sources = rtc_media_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("rtc_unittests_bundle_data") {
    testonly = true
    sources = rtc_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("scenario_resources_bundle_data") {
    testonly = true
    sources = scenario_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("scenario_unittest_resources_bundle_data") {
    testonly = true
    sources = scenario_unittest_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("svc_tests_bundle_data") {
    testonly = true
    sources = svc_tests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("test_support_unittests_bundle_data") {
    testonly = true
    sources = test_support_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("tools_unittests_bundle_data") {
    testonly = true
    sources = tools_unittests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("video_coding_modules_tests_resources_bundle_data") {
    testonly = true
    sources = video_coding_modules_tests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("video_engine_tests_bundle_data") {
    testonly = true
    sources = video_engine_tests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
  bundle_data("webrtc_perf_tests_bundle_data") {
    testonly = true
    sources = webrtc_perf_tests_resources
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
}
